export interface SupabaseConfig {
    url: string;
    anonKey: string;
    serviceRoleKey: string;
}
export interface DatabaseResult<T = any> {
    data: T | null;
    error: any;
}
export interface EdgeFunctionResult {
    data: any;
    error: any;
}
export declare class SupabaseService {
    private client;
    constructor();
    /**
     * Query data from a table with optional filters
     */
    queryData<T = any>(tableName: string, query?: Record<string, any>, select?: string): Promise<DatabaseResult<T[]>>;
    /**
     * Insert data into a table
     */
    insertData<T = any>(tableName: string, data: Record<string, any> | Record<string, any>[]): Promise<DatabaseResult<T>>;
    /**
     * Update data in a table based on a query
     */
    updateData<T = any>(tableName: string, data: Record<string, any>, query: Record<string, any>): Promise<DatabaseResult<T>>;
    /**
     * Delete data from a table based on a query
     */
    deleteData<T = any>(tableName: string, query: Record<string, any>): Promise<DatabaseResult<T>>;
    /**
     * Invoke an Edge Function
     */
    invokeEdgeFunction(functionName: string, payload?: Record<string, any>): Promise<EdgeFunctionResult>;
    /**
     * Fetch database table information
     */
    listTables(): Promise<{
        tables: any[];
        error: any;
    }>;
}
export declare const supabaseService: SupabaseService;
//# sourceMappingURL=supabase.d.ts.map