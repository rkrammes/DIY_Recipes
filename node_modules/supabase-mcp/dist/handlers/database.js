import { mcpService } from '../services/mcp';
import { mcpConfig } from '../config';
/**
 * Handle MCP tool call requests for database operations
 */
export const handleDatabaseOperation = async (req, res) => {
    try {
        // Validate API key
        const apiKey = req.headers['x-api-key'];
        if (apiKey !== mcpConfig.apiKey) {
            return res.status(401).json({ error: 'Unauthorized: Invalid API key' });
        }
        const toolCall = {
            name: req.params.operation,
            parameters: req.body
        };
        // Only allow database operations
        const allowedOperations = ['queryDatabase', 'insertData', 'updateData', 'deleteData', 'listTables'];
        if (!allowedOperations.includes(toolCall.name)) {
            return res.status(400).json({
                error: `Invalid database operation: ${toolCall.name}. Allowed operations are: ${allowedOperations.join(', ')}`
            });
        }
        const result = await mcpService.handleToolCall(toolCall);
        if (result.error) {
            return res.status(400).json({ error: result.error });
        }
        return res.status(200).json({ data: result.content });
    }
    catch (error) {
        console.error('Database operation error:', error);
        return res.status(500).json({ error: `Server error: ${error.message}` });
    }
};
/**
 * Handle listing of database tables
 */
export const handleListTables = async (req, res) => {
    try {
        // Validate API key
        const apiKey = req.headers['x-api-key'];
        if (apiKey !== mcpConfig.apiKey) {
            return res.status(401).json({ error: 'Unauthorized: Invalid API key' });
        }
        const toolCall = {
            name: 'listTables',
            parameters: {}
        };
        const result = await mcpService.handleToolCall(toolCall);
        if (result.error) {
            return res.status(400).json({ error: result.error });
        }
        return res.status(200).json({ tables: result.content });
    }
    catch (error) {
        console.error('List tables error:', error);
        return res.status(500).json({ error: `Server error: ${error.message}` });
    }
};
